<?php

namespace Ilcfrance\Orangetools\DataBundle\EntityRepository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Ilcfrance\Orangetools\DataBundle\Entity\User;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Ilcfrance\Orangetools\DataBundle\Entity\Role;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface, UserLoaderInterface
{

	/**
	 * Used for Authentification Security
	 * {@inheritDoc} @see UserProviderInterface::loadUserByUsername()
	 *
	 * @param string $username
	 *
	 * @throws UsernameNotFoundException
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function loadUserByUsername($username)
	{
		$qb = $this->createQueryBuilder('u')
			->where('u.username = :username')
			->andWhere('u.lockout = :lockout')
			->andWhere('u.validUntil IS NULL OR u.validUntil > :now')
			->setParameter('username', $username)
			->setParameter('lockout', User::LOCKOUT_UNLOCKED)
			->setParameter('now', new \DateTime('now'));
		$query = $qb->getQuery();

		try {
			$user = $query->getSingleResult();
		} catch (NoResultException $e) {
			$exp = new UsernameNotFoundException(sprintf('Unable to find an active User identified by "%s".', $username), 0, $e);
			$exp->setUsername($username);
			throw $exp;
		}

		return $user;
	}

	/**
	 * Used for Authentification Security
	 * {@inheritDoc} @see UserProviderInterface::refreshUser()
	 *
	 * @param UserInterface $user
	 *
	 * @return User
	 */
	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
		}

		return $this->loadUserByUsername($user->getUsername());
	}

	/**
	 * Check if is a sublass of the Entity
	 * {@inheritDoc} @see UserProviderInterface::supportsClass()
	 *
	 * @param string $class
	 *
	 * @return boolean
	 */
	public function supportsClass($class)
	{
		return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
	}

	/**
	 * Count All
	 *
	 * @return mixed
	 */
	public function count()
	{
		$qb = $this->createQueryBuilder('u')->select('count(u)');
		$query = $qb->getQuery();

		return $query->setCacheable('true')->useQueryCache(true)->useResultCache(true)->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery()
	{
		$qb = $this->createQueryBuilder('u')->orderBy('u.username', 'ASC');
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAll()
	{
		return $this->getAllQuery()->setCacheable('true')->useQueryCache(true)->useResultCache(true)
		->execute();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByRoleQuery(Role $role)
	{
		$qb = $this->createQueryBuilder('u')
			->join('u.userRoles', 'r')
			->where('r.id = :rId')
			->orderBy('u.username', 'ASC')
			->setParameter('rId', $role->getId());
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByRole(Role $role)
	{
		return $this->getAllByRoleQuery($role)->setCacheable('true')->useQueryCache(true)->useResultCache(true)
		->execute();
	}
}
