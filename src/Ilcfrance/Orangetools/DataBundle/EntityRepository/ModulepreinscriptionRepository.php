<?php

namespace Ilcfrance\Orangetools\DataBundle\EntityRepository;

use Ilcfrance\Orangetools\DataBundle\Entity\Moduleformation;
use Ilcfrance\Orangetools\DataBundle\Entity\User;

/**
 * ModulepreinscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModulepreinscriptionRepository extends \Doctrine\ORM\EntityRepository
{

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function count()
	{
		$qb = $this->createQueryBuilder('mpi')->select('count(mpi)');
		$query = $qb->getQuery();

		return $query->setCacheable('true')->useQueryCache(true)->useResultCache(true)->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery()
	{
		$qb = $this->createQueryBuilder('mpi')
			->orderBy('mpi.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAll()
	{
		return $this->getAllQuery()->setCacheable('true')->useQueryCache(true)->useResultCache(true)
		->execute();
	}

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function countByModuleformation(Moduleformation $mf)
	{
		$qb = $this->createQueryBuilder('mpi')->select('count(mpi)')->join('mpi.sesmpionformation', 'mf')->where('mf.id = :mfId')->setParameter('mfId', $mf->getId());
		$query = $qb->getQuery();

		return $query->setCacheable('true')->useQueryCache(true)->useResultCache(true)->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByModuleformationQuery(Moduleformation $mf)
	{
		$qb = $this->createQueryBuilder('mpi')
			->join('mpi.moduleformation', 'mf')
			->where('mf.id = :mfId')
			->setParameter('mfId', $mf->getId())
			->orderBy('mpi.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByModuleformation(Moduleformation $mf)
	{
		return $this->getAllByModuleformationQuery($mf)->setCacheable('true')->useQueryCache(true)->useResultCache(true)
		->execute();
	}

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function countByUser(User $u)
	{
		$qb = $this->createQueryBuilder('mpi')->select('count(mpi)')->join('mpi.user', 'u')->where('u.id = :uId')->setParameter('uId', $u->getId());
		$query = $qb->getQuery();

		return $query->setCacheable('true')->useQueryCache(true)->useResultCache(true)->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByUserQuery(User $u)
	{
		$qb = $this->createQueryBuilder('mpi')
			->join('mpi.user', 'u')
			->where('u.id = :uId')
			->setParameter('uId', $u->getId())
			->orderBy('mpi.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByUser(User $u)
	{
		return $this->getAllByUserQuery($u)->setCacheable('true')->useQueryCache(true)->useResultCache(true)
		->execute();
	}
}
