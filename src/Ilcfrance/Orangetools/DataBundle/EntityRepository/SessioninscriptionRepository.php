<?php

namespace Ilcfrance\Orangetools\DataBundle\EntityRepository;

use Ilcfrance\Orangetools\DataBundle\Entity\User;
use Ilcfrance\Orangetools\DataBundle\Entity\Sessionformation;
use Ilcfrance\Orangetools\DataBundle\Entity\Moduleformation;

/**
 * SessioninscriptionRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessioninscriptionRepository extends \Doctrine\ORM\EntityRepository
{

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function count()
	{

		$qb = $this->createQueryBuilder('si')->select('count(si)');
		$query = $qb->getQuery();

		return $query->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->getSingleScalarResult();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery()
	{

		$qb = $this->createQueryBuilder('si')->orderBy('si.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *         \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function getAll()
	{

		return $this->getAllQuery()
			->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->execute();

	}

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function countBySessionformation(Sessionformation $sf)
	{

		$qb = $this->createQueryBuilder('si')
			->select('count(si)')
			->join('si.sessionformation', 'sf')
			->where('sf.id = :sfId')
			->setParameter('sfId', $sf->getId());
		$query = $qb->getQuery();

		return $query->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->getSingleScalarResult();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllBySessionformationQuery(Sessionformation $sf)
	{

		$qb = $this->createQueryBuilder('si')
			->join('si.sessionformation', 'sf')
			->where('sf.id = :sfId')
			->setParameter('sfId', $sf->getId())
			->orderBy('si.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *         \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function getAllBySessionformation(Sessionformation $sf)
	{

		return $this->getAllBySessionformationQuery($sf)
			->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->execute();

	}

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function countByUser(User $u)
	{

		$qb = $this->createQueryBuilder('si')
			->select('count(si)')
			->join('si.user', 'u')
			->where('u.id = :uId')
			->setParameter('uId', $u->getId());
		$query = $qb->getQuery();

		return $query->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->getSingleScalarResult();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByUserQuery(User $u)
	{

		$qb = $this->createQueryBuilder('si')
			->join('si.user', 'u')
			->where('u.id = :uId')
			->setParameter('uId', $u->getId())
			->orderBy('si.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *         \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByUser(User $u)
	{

		return $this->getAllByUserQuery($u)
			->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->execute();

	}

	/**
	 * Count All
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:, \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function countByUserModuleformationId(User $u, $mf_id)
	{

		$qb = $this->createQueryBuilder('si')
			->select('count(si)')
			->join('si.user', 'u')
			->join('si.sessionformation', 'sf')
			->join('sf.moduleformation', 'mf')
			->where('u.id = :uId')
			->andWhere('mf.id = :mfId')
			->setParameter('uId', $u->getId())
			->setParameter('mfId', $mf_id);
		$query = $qb->getQuery();

		return $query->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->getSingleScalarResult();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByUserModuleformationIdQuery(User $u, $mf_id)
	{

		$qb = $this->createQueryBuilder('si')
			->join('si.user', 'u')
			->join('si.sessionformation', 'sf')
			->join('sf.moduleformation', 'mf')
			->where('u.id = :uId')
			->andWhere('mf.id = :mfId')
			->setParameter('uId', $u->getId())
			->setParameter('mfId', $mf_id)
			->orderBy('si.dtCrea', 'ASC');
		$query = $qb->getQuery();

		return $query;

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *         \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByUserModuleformationId(User $u, $mf_id)
	{

		return $this->getAllByUserModuleformationIdQuery($u, $mf_id)
			->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->execute();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *         \Doctrine\ORM\Internal\Hydration\mixed,
	 *         \Doctrine\DBAL\Driver\Statement,
	 *         \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByUserModuleformation(User $u, Moduleformation $mf)
	{

		return $this->getAllByUserModuleformationIdQuery($u, $mf->getId())
			->setCacheable('true')
			->useQueryCache(true)
			->useResultCache(true)
			->execute();

	}

}
